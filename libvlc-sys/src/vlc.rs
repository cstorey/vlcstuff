/* automatically generated by rust-bindgen */
#![feature(libc)]
#![allow(non_camel_case_types, missing_copy_implementations, non_upper_case_globals)]

extern crate libc;

pub type int8_t = libc::c_char;
pub type int16_t = libc::c_short;
pub type int32_t = libc::c_int;
pub type int64_t = libc::c_long;
pub type uint8_t = libc::c_uchar;
pub type uint16_t = libc::c_ushort;
pub type uint32_t = libc::c_uint;
pub type uint64_t = libc::c_ulong;
pub type int_least8_t = libc::c_char;
pub type int_least16_t = libc::c_short;
pub type int_least32_t = libc::c_int;
pub type int_least64_t = libc::c_long;
pub type uint_least8_t = libc::c_uchar;
pub type uint_least16_t = libc::c_ushort;
pub type uint_least32_t = libc::c_uint;
pub type uint_least64_t = libc::c_ulong;
pub type int_fast8_t = libc::c_char;
pub type int_fast16_t = libc::c_long;
pub type int_fast32_t = libc::c_long;
pub type int_fast64_t = libc::c_long;
pub type uint_fast8_t = libc::c_uchar;
pub type uint_fast16_t = libc::c_ulong;
pub type uint_fast32_t = libc::c_ulong;
pub type uint_fast64_t = libc::c_ulong;
pub type intptr_t = libc::c_long;
pub type uintptr_t = libc::c_ulong;
pub type intmax_t = libc::c_long;
pub type uintmax_t = libc::c_ulong;
pub enum Struct_libvlc_instance_t { }
pub type libvlc_instance_t = Struct_libvlc_instance_t;
pub type libvlc_time_t = int64_t;
pub enum Struct_libvlc_log_iterator_t { }
pub type libvlc_log_iterator_t = Struct_libvlc_log_iterator_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_log_message_t {
    pub i_severity: libc::c_int,
    pub psz_type: *const libc::c_char,
    pub psz_name: *const libc::c_char,
    pub psz_header: *const libc::c_char,
    pub psz_message: *const libc::c_char,
}
impl ::std::default::Default for Struct_libvlc_log_message_t {
    fn default() -> Struct_libvlc_log_message_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_log_message_t = Struct_libvlc_log_message_t;
pub enum Struct_libvlc_event_manager_t { }
pub type libvlc_event_manager_t = Struct_libvlc_event_manager_t;
pub type libvlc_event_type_t = libc::c_int;
pub type libvlc_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const Struct_libvlc_event_t,
                               arg2: *mut libc::c_void) -> ()>;
pub type Enum_libvlc_log_level = libc::c_uint;
pub const LIBVLC_DEBUG: libc::c_uint = 0;
pub const LIBVLC_NOTICE: libc::c_uint = 2;
pub const LIBVLC_WARNING: libc::c_uint = 3;
pub const LIBVLC_ERROR: libc::c_uint = 4;
pub enum Struct_vlc_log_t { }
pub type libvlc_log_t = Struct_vlc_log_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_module_description_t {
    pub psz_name: *mut libc::c_char,
    pub psz_shortname: *mut libc::c_char,
    pub psz_longname: *mut libc::c_char,
    pub psz_help: *mut libc::c_char,
    pub p_next: *mut Struct_libvlc_module_description_t,
}
impl ::std::default::Default for Struct_libvlc_module_description_t {
    fn default() -> Struct_libvlc_module_description_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_module_description_t = Struct_libvlc_module_description_t;
pub enum Struct_libvlc_media_t { }
pub type libvlc_media_t = Struct_libvlc_media_t;
pub type Enum_libvlc_meta_t = libc::c_uint;
pub const libvlc_meta_Title: libc::c_uint = 0;
pub const libvlc_meta_Artist: libc::c_uint = 1;
pub const libvlc_meta_Genre: libc::c_uint = 2;
pub const libvlc_meta_Copyright: libc::c_uint = 3;
pub const libvlc_meta_Album: libc::c_uint = 4;
pub const libvlc_meta_TrackNumber: libc::c_uint = 5;
pub const libvlc_meta_Description: libc::c_uint = 6;
pub const libvlc_meta_Rating: libc::c_uint = 7;
pub const libvlc_meta_Date: libc::c_uint = 8;
pub const libvlc_meta_Setting: libc::c_uint = 9;
pub const libvlc_meta_URL: libc::c_uint = 10;
pub const libvlc_meta_Language: libc::c_uint = 11;
pub const libvlc_meta_NowPlaying: libc::c_uint = 12;
pub const libvlc_meta_Publisher: libc::c_uint = 13;
pub const libvlc_meta_EncodedBy: libc::c_uint = 14;
pub const libvlc_meta_ArtworkURL: libc::c_uint = 15;
pub const libvlc_meta_TrackID: libc::c_uint = 16;
pub type libvlc_meta_t = Enum_libvlc_meta_t;
pub type Enum_libvlc_state_t = libc::c_uint;
pub const libvlc_NothingSpecial: libc::c_uint = 0;
pub const libvlc_Opening: libc::c_uint = 1;
pub const libvlc_Buffering: libc::c_uint = 2;
pub const libvlc_Playing: libc::c_uint = 3;
pub const libvlc_Paused: libc::c_uint = 4;
pub const libvlc_Stopped: libc::c_uint = 5;
pub const libvlc_Ended: libc::c_uint = 6;
pub const libvlc_Error: libc::c_uint = 7;
pub type libvlc_state_t = Enum_libvlc_state_t;
pub type Enum_Unnamed1 = libc::c_uint;
pub const libvlc_media_option_trusted: libc::c_uint = 2;
pub const libvlc_media_option_unique: libc::c_uint = 256;
pub type Enum_libvlc_track_type_t = libc::c_int;
pub const libvlc_track_unknown: libc::c_int = -1;
pub const libvlc_track_audio: libc::c_int = 0;
pub const libvlc_track_video: libc::c_int = 1;
pub const libvlc_track_text: libc::c_int = 2;
pub type libvlc_track_type_t = Enum_libvlc_track_type_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_media_stats_t {
    pub i_read_bytes: libc::c_int,
    pub f_input_bitrate: libc::c_float,
    pub i_demux_read_bytes: libc::c_int,
    pub f_demux_bitrate: libc::c_float,
    pub i_demux_corrupted: libc::c_int,
    pub i_demux_discontinuity: libc::c_int,
    pub i_decoded_video: libc::c_int,
    pub i_decoded_audio: libc::c_int,
    pub i_displayed_pictures: libc::c_int,
    pub i_lost_pictures: libc::c_int,
    pub i_played_abuffers: libc::c_int,
    pub i_lost_abuffers: libc::c_int,
    pub i_sent_packets: libc::c_int,
    pub i_sent_bytes: libc::c_int,
    pub f_send_bitrate: libc::c_float,
}
impl ::std::default::Default for Struct_libvlc_media_stats_t {
    fn default() -> Struct_libvlc_media_stats_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_media_stats_t = Struct_libvlc_media_stats_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_media_track_info_t {
    pub i_codec: uint32_t,
    pub i_id: libc::c_int,
    pub i_type: libvlc_track_type_t,
    pub i_profile: libc::c_int,
    pub i_level: libc::c_int,
    pub u: Union_Unnamed2,
}
impl ::std::default::Default for Struct_libvlc_media_track_info_t {
    fn default() -> Struct_libvlc_media_track_info_t {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed2 {
    pub _bindgen_data_: [u32; 2usize],
}
impl Union_Unnamed2 {
    pub unsafe fn audio(&mut self) -> *mut Struct_Unnamed3 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn video(&mut self) -> *mut Struct_Unnamed4 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed2 {
    fn default() -> Union_Unnamed2 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub i_channels: libc::c_uint,
    pub i_rate: libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Struct_Unnamed3 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub i_height: libc::c_uint,
    pub i_width: libc::c_uint,
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Struct_Unnamed4 { unsafe { ::std::mem::zeroed() } }
}
pub type libvlc_media_track_info_t = Struct_libvlc_media_track_info_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_audio_track_t {
    pub i_channels: libc::c_uint,
    pub i_rate: libc::c_uint,
}
impl ::std::default::Default for Struct_libvlc_audio_track_t {
    fn default() -> Struct_libvlc_audio_track_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_audio_track_t = Struct_libvlc_audio_track_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_video_track_t {
    pub i_height: libc::c_uint,
    pub i_width: libc::c_uint,
    pub i_sar_num: libc::c_uint,
    pub i_sar_den: libc::c_uint,
    pub i_frame_rate_num: libc::c_uint,
    pub i_frame_rate_den: libc::c_uint,
}
impl ::std::default::Default for Struct_libvlc_video_track_t {
    fn default() -> Struct_libvlc_video_track_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_video_track_t = Struct_libvlc_video_track_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_subtitle_track_t {
    pub psz_encoding: *mut libc::c_char,
}
impl ::std::default::Default for Struct_libvlc_subtitle_track_t {
    fn default() -> Struct_libvlc_subtitle_track_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_subtitle_track_t = Struct_libvlc_subtitle_track_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_media_track_t {
    pub i_codec: uint32_t,
    pub i_original_fourcc: uint32_t,
    pub i_id: libc::c_int,
    pub i_type: libvlc_track_type_t,
    pub i_profile: libc::c_int,
    pub i_level: libc::c_int,
    pub _bindgen_data_1_: [u64; 1usize],
    pub i_bitrate: libc::c_uint,
    pub psz_language: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
}
impl Struct_libvlc_media_track_t {
    pub unsafe fn audio(&mut self) -> *mut *mut libvlc_audio_track_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn video(&mut self) -> *mut *mut libvlc_video_track_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
    pub unsafe fn subtitle(&mut self) -> *mut *mut libvlc_subtitle_track_t {
        ::std::mem::transmute(&self._bindgen_data_1_)
    }
}
impl ::std::default::Default for Struct_libvlc_media_track_t {
    fn default() -> Struct_libvlc_media_track_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_media_track_t = Struct_libvlc_media_track_t;
pub enum Struct_libvlc_media_list_t { }
pub enum Struct_libvlc_media_player_t { }
pub type libvlc_media_player_t = Struct_libvlc_media_player_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_track_description_t {
    pub i_id: libc::c_int,
    pub psz_name: *mut libc::c_char,
    pub p_next: *mut Struct_libvlc_track_description_t,
}
impl ::std::default::Default for Struct_libvlc_track_description_t {
    fn default() -> Struct_libvlc_track_description_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_track_description_t = Struct_libvlc_track_description_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_audio_output_t {
    pub psz_name: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
    pub p_next: *mut Struct_libvlc_audio_output_t,
}
impl ::std::default::Default for Struct_libvlc_audio_output_t {
    fn default() -> Struct_libvlc_audio_output_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_audio_output_t = Struct_libvlc_audio_output_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_audio_output_device_t {
    pub p_next: *mut Struct_libvlc_audio_output_device_t,
    pub psz_device: *mut libc::c_char,
    pub psz_description: *mut libc::c_char,
}
impl ::std::default::Default for Struct_libvlc_audio_output_device_t {
    fn default() -> Struct_libvlc_audio_output_device_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_audio_output_device_t = Struct_libvlc_audio_output_device_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_rectangle_t {
    pub top: libc::c_int,
    pub left: libc::c_int,
    pub bottom: libc::c_int,
    pub right: libc::c_int,
}
impl ::std::default::Default for Struct_libvlc_rectangle_t {
    fn default() -> Struct_libvlc_rectangle_t {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type libvlc_rectangle_t = Struct_libvlc_rectangle_t;
pub type Enum_libvlc_video_marquee_option_t = libc::c_uint;
pub const libvlc_marquee_Enable: libc::c_uint = 0;
pub const libvlc_marquee_Text: libc::c_uint = 1;
pub const libvlc_marquee_Color: libc::c_uint = 2;
pub const libvlc_marquee_Opacity: libc::c_uint = 3;
pub const libvlc_marquee_Position: libc::c_uint = 4;
pub const libvlc_marquee_Refresh: libc::c_uint = 5;
pub const libvlc_marquee_Size: libc::c_uint = 6;
pub const libvlc_marquee_Timeout: libc::c_uint = 7;
pub const libvlc_marquee_X: libc::c_uint = 8;
pub const libvlc_marquee_Y: libc::c_uint = 9;
pub type libvlc_video_marquee_option_t = Enum_libvlc_video_marquee_option_t;
pub type Enum_libvlc_navigate_mode_t = libc::c_uint;
pub const libvlc_navigate_activate: libc::c_uint = 0;
pub const libvlc_navigate_up: libc::c_uint = 1;
pub const libvlc_navigate_down: libc::c_uint = 2;
pub const libvlc_navigate_left: libc::c_uint = 3;
pub const libvlc_navigate_right: libc::c_uint = 4;
pub type libvlc_navigate_mode_t = Enum_libvlc_navigate_mode_t;
pub type Enum_libvlc_position_t = libc::c_int;
pub const libvlc_position_disable: libc::c_int = -1;
pub const libvlc_position_center: libc::c_int = 0;
pub const libvlc_position_left: libc::c_int = 1;
pub const libvlc_position_right: libc::c_int = 2;
pub const libvlc_position_top: libc::c_int = 3;
pub const libvlc_position_top_left: libc::c_int = 4;
pub const libvlc_position_top_right: libc::c_int = 5;
pub const libvlc_position_bottom: libc::c_int = 6;
pub const libvlc_position_bottom_left: libc::c_int = 7;
pub const libvlc_position_bottom_right: libc::c_int = 8;
pub type libvlc_position_t = Enum_libvlc_position_t;
pub type libvlc_video_lock_cb =
    ::std::option::Option<extern "C" fn
                              (opaque: *mut libc::c_void,
                               planes: *mut *mut libc::c_void)
                              -> *mut libc::c_void>;
pub type libvlc_video_unlock_cb =
    ::std::option::Option<extern "C" fn
                              (opaque: *mut libc::c_void,
                               picture: *mut libc::c_void,
                               planes: *const *mut libc::c_void) -> ()>;
pub type libvlc_video_display_cb =
    ::std::option::Option<extern "C" fn
                              (opaque: *mut libc::c_void,
                               picture: *mut libc::c_void) -> ()>;
pub type libvlc_video_format_cb =
    ::std::option::Option<extern "C" fn
                              (opaque: *mut *mut libc::c_void,
                               chroma: *mut libc::c_char,
                               width: *mut libc::c_uint,
                               height: *mut libc::c_uint,
                               pitches: *mut libc::c_uint,
                               lines: *mut libc::c_uint) -> libc::c_uint>;
pub type libvlc_video_cleanup_cb =
    ::std::option::Option<extern "C" fn(opaque: *mut libc::c_void) -> ()>;
pub type libvlc_audio_play_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut libc::c_void,
                               samples: *const libc::c_void,
                               count: libc::c_uint, pts: int64_t) -> ()>;
pub type libvlc_audio_pause_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut libc::c_void, pts: int64_t)
                              -> ()>;
pub type libvlc_audio_resume_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut libc::c_void, pts: int64_t)
                              -> ()>;
pub type libvlc_audio_flush_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut libc::c_void, pts: int64_t)
                              -> ()>;
pub type libvlc_audio_drain_cb =
    ::std::option::Option<extern "C" fn(data: *mut libc::c_void) -> ()>;
pub type libvlc_audio_set_volume_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut libc::c_void,
                               volume: libc::c_float, mute: u8) -> ()>;
pub type libvlc_audio_setup_cb =
    ::std::option::Option<extern "C" fn
                              (data: *mut *mut libc::c_void,
                               format: *mut libc::c_char,
                               rate: *mut libc::c_uint,
                               channels: *mut libc::c_uint)
                              -> libc::c_int>;
pub type libvlc_audio_cleanup_cb =
    ::std::option::Option<extern "C" fn(data: *mut libc::c_void) -> ()>;
pub type Enum_libvlc_video_logo_option_t = libc::c_uint;
pub const libvlc_logo_enable: libc::c_uint = 0;
pub const libvlc_logo_file: libc::c_uint = 1;
pub const libvlc_logo_x: libc::c_uint = 2;
pub const libvlc_logo_y: libc::c_uint = 3;
pub const libvlc_logo_delay: libc::c_uint = 4;
pub const libvlc_logo_repeat: libc::c_uint = 5;
pub const libvlc_logo_opacity: libc::c_uint = 6;
pub const libvlc_logo_position: libc::c_uint = 7;
pub type Enum_libvlc_video_adjust_option_t = libc::c_uint;
pub const libvlc_adjust_Enable: libc::c_uint = 0;
pub const libvlc_adjust_Contrast: libc::c_uint = 1;
pub const libvlc_adjust_Brightness: libc::c_uint = 2;
pub const libvlc_adjust_Hue: libc::c_uint = 3;
pub const libvlc_adjust_Saturation: libc::c_uint = 4;
pub const libvlc_adjust_Gamma: libc::c_uint = 5;
pub type Enum_libvlc_audio_output_device_types_t = libc::c_int;
pub const libvlc_AudioOutputDevice_Error: libc::c_int = -1;
pub const libvlc_AudioOutputDevice_Mono: libc::c_int = 1;
pub const libvlc_AudioOutputDevice_Stereo: libc::c_int = 2;
pub const libvlc_AudioOutputDevice_2F2R: libc::c_int = 4;
pub const libvlc_AudioOutputDevice_3F2R: libc::c_int = 5;
pub const libvlc_AudioOutputDevice_5_1: libc::c_int = 6;
pub const libvlc_AudioOutputDevice_6_1: libc::c_int = 7;
pub const libvlc_AudioOutputDevice_7_1: libc::c_int = 8;
pub const libvlc_AudioOutputDevice_SPDIF: libc::c_int = 10;
pub type libvlc_audio_output_device_types_t =
    Enum_libvlc_audio_output_device_types_t;
pub type Enum_libvlc_audio_output_channel_t = libc::c_int;
pub const libvlc_AudioChannel_Error: libc::c_int = -1;
pub const libvlc_AudioChannel_Stereo: libc::c_int = 1;
pub const libvlc_AudioChannel_RStereo: libc::c_int = 2;
pub const libvlc_AudioChannel_Left: libc::c_int = 3;
pub const libvlc_AudioChannel_Right: libc::c_int = 4;
pub const libvlc_AudioChannel_Dolbys: libc::c_int = 5;
pub type libvlc_audio_output_channel_t = Enum_libvlc_audio_output_channel_t;
pub type libvlc_media_list_t = Struct_libvlc_media_list_t;
pub enum Struct_libvlc_media_list_player_t { }
pub type libvlc_media_list_player_t = Struct_libvlc_media_list_player_t;
pub type Enum_libvlc_playback_mode_t = libc::c_uint;
pub const libvlc_playback_mode_default: libc::c_uint = 0;
pub const libvlc_playback_mode_loop: libc::c_uint = 1;
pub const libvlc_playback_mode_repeat: libc::c_uint = 2;
pub type libvlc_playback_mode_t = Enum_libvlc_playback_mode_t;
pub enum Struct_libvlc_media_library_t { }
pub type libvlc_media_library_t = Struct_libvlc_media_library_t;
pub enum Struct_libvlc_media_discoverer_t { }
pub type libvlc_media_discoverer_t = Struct_libvlc_media_discoverer_t;
pub type Enum_libvlc_event_e = libc::c_uint;
pub const libvlc_MediaMetaChanged: libc::c_uint = 0;
pub const libvlc_MediaSubItemAdded: libc::c_uint = 1;
pub const libvlc_MediaDurationChanged: libc::c_uint = 2;
pub const libvlc_MediaParsedChanged: libc::c_uint = 3;
pub const libvlc_MediaFreed: libc::c_uint = 4;
pub const libvlc_MediaStateChanged: libc::c_uint = 5;
pub const libvlc_MediaSubItemTreeAdded: libc::c_uint = 6;
pub const libvlc_MediaPlayerMediaChanged: libc::c_uint = 256;
pub const libvlc_MediaPlayerNothingSpecial: libc::c_uint = 257;
pub const libvlc_MediaPlayerOpening: libc::c_uint = 258;
pub const libvlc_MediaPlayerBuffering: libc::c_uint = 259;
pub const libvlc_MediaPlayerPlaying: libc::c_uint = 260;
pub const libvlc_MediaPlayerPaused: libc::c_uint = 261;
pub const libvlc_MediaPlayerStopped: libc::c_uint = 262;
pub const libvlc_MediaPlayerForward: libc::c_uint = 263;
pub const libvlc_MediaPlayerBackward: libc::c_uint = 264;
pub const libvlc_MediaPlayerEndReached: libc::c_uint = 265;
pub const libvlc_MediaPlayerEncounteredError: libc::c_uint = 266;
pub const libvlc_MediaPlayerTimeChanged: libc::c_uint = 267;
pub const libvlc_MediaPlayerPositionChanged: libc::c_uint = 268;
pub const libvlc_MediaPlayerSeekableChanged: libc::c_uint = 269;
pub const libvlc_MediaPlayerPausableChanged: libc::c_uint = 270;
pub const libvlc_MediaPlayerTitleChanged: libc::c_uint = 271;
pub const libvlc_MediaPlayerSnapshotTaken: libc::c_uint = 272;
pub const libvlc_MediaPlayerLengthChanged: libc::c_uint = 273;
pub const libvlc_MediaPlayerVout: libc::c_uint = 274;
pub const libvlc_MediaListItemAdded: libc::c_uint = 512;
pub const libvlc_MediaListWillAddItem: libc::c_uint = 513;
pub const libvlc_MediaListItemDeleted: libc::c_uint = 514;
pub const libvlc_MediaListWillDeleteItem: libc::c_uint = 515;
pub const libvlc_MediaListViewItemAdded: libc::c_uint = 768;
pub const libvlc_MediaListViewWillAddItem: libc::c_uint = 769;
pub const libvlc_MediaListViewItemDeleted: libc::c_uint = 770;
pub const libvlc_MediaListViewWillDeleteItem: libc::c_uint = 771;
pub const libvlc_MediaListPlayerPlayed: libc::c_uint = 1024;
pub const libvlc_MediaListPlayerNextItemSet: libc::c_uint = 1025;
pub const libvlc_MediaListPlayerStopped: libc::c_uint = 1026;
pub const libvlc_MediaDiscovererStarted: libc::c_uint = 1280;
pub const libvlc_MediaDiscovererEnded: libc::c_uint = 1281;
pub const libvlc_VlmMediaAdded: libc::c_uint = 1536;
pub const libvlc_VlmMediaRemoved: libc::c_uint = 1537;
pub const libvlc_VlmMediaChanged: libc::c_uint = 1538;
pub const libvlc_VlmMediaInstanceStarted: libc::c_uint = 1539;
pub const libvlc_VlmMediaInstanceStopped: libc::c_uint = 1540;
pub const libvlc_VlmMediaInstanceStatusInit: libc::c_uint = 1541;
pub const libvlc_VlmMediaInstanceStatusOpening: libc::c_uint = 1542;
pub const libvlc_VlmMediaInstanceStatusPlaying: libc::c_uint = 1543;
pub const libvlc_VlmMediaInstanceStatusPause: libc::c_uint = 1544;
pub const libvlc_VlmMediaInstanceStatusEnd: libc::c_uint = 1545;
pub const libvlc_VlmMediaInstanceStatusError: libc::c_uint = 1546;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_libvlc_event_t {
    pub _type: libc::c_int,
    pub p_obj: *mut libc::c_void,
    pub u: Union_Unnamed5,
}
impl ::std::default::Default for Struct_libvlc_event_t {
    fn default() -> Struct_libvlc_event_t { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u64; 2usize],
}
impl Union_Unnamed5 {
    pub unsafe fn media_meta_changed(&mut self) -> *mut Struct_Unnamed6 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_subitem_added(&mut self) -> *mut Struct_Unnamed7 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_duration_changed(&mut self) -> *mut Struct_Unnamed8 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_parsed_changed(&mut self) -> *mut Struct_Unnamed9 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_freed(&mut self) -> *mut Struct_Unnamed10 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_state_changed(&mut self) -> *mut Struct_Unnamed11 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_subitemtree_added(&mut self)
     -> *mut Struct_Unnamed12 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_buffering(&mut self) -> *mut Struct_Unnamed13 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_position_changed(&mut self)
     -> *mut Struct_Unnamed14 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_time_changed(&mut self)
     -> *mut Struct_Unnamed15 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_title_changed(&mut self)
     -> *mut Struct_Unnamed16 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_seekable_changed(&mut self)
     -> *mut Struct_Unnamed17 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_pausable_changed(&mut self)
     -> *mut Struct_Unnamed18 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_vout(&mut self) -> *mut Struct_Unnamed19 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_list_item_added(&mut self) -> *mut Struct_Unnamed20 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_list_will_add_item(&mut self)
     -> *mut Struct_Unnamed21 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_list_item_deleted(&mut self)
     -> *mut Struct_Unnamed22 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_list_will_delete_item(&mut self)
     -> *mut Struct_Unnamed23 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_list_player_next_item_set(&mut self)
     -> *mut Struct_Unnamed24 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_snapshot_taken(&mut self)
     -> *mut Struct_Unnamed25 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_length_changed(&mut self)
     -> *mut Struct_Unnamed26 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn vlm_media_event(&mut self) -> *mut Struct_Unnamed27 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
    pub unsafe fn media_player_media_changed(&mut self)
     -> *mut Struct_Unnamed28 {
        ::std::mem::transmute(&self._bindgen_data_)
    }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Union_Unnamed5 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub meta_type: libvlc_meta_t,
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Struct_Unnamed6 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub new_child: *mut libvlc_media_t,
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Struct_Unnamed7 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub new_duration: int64_t,
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Struct_Unnamed8 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub new_status: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Struct_Unnamed9 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub md: *mut libvlc_media_t,
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Struct_Unnamed10 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub new_state: libvlc_state_t,
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Struct_Unnamed11 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub item: *mut libvlc_media_t,
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Struct_Unnamed12 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub new_cache: libc::c_float,
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Struct_Unnamed13 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub new_position: libc::c_float,
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Struct_Unnamed14 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub new_time: libvlc_time_t,
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Struct_Unnamed15 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub new_title: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Struct_Unnamed16 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub new_seekable: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Struct_Unnamed17 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub new_pausable: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Struct_Unnamed18 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub new_count: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Struct_Unnamed19 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Struct_Unnamed20 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Struct_Unnamed21 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Struct_Unnamed22 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub item: *mut libvlc_media_t,
    pub index: libc::c_int,
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Struct_Unnamed23 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub item: *mut libvlc_media_t,
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Struct_Unnamed24 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub psz_filename: *mut libc::c_char,
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Struct_Unnamed25 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub new_length: libvlc_time_t,
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Struct_Unnamed26 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub psz_media_name: *const libc::c_char,
    pub psz_instance_name: *const libc::c_char,
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Struct_Unnamed27 { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub new_media: *mut libvlc_media_t,
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Struct_Unnamed28 { unsafe { ::std::mem::zeroed() } }
}
pub type libvlc_event_t = Struct_libvlc_event_t;
#[link(name = "vlc")]
extern "C" {
    pub fn libvlc_errmsg() -> *const libc::c_char;
    pub fn libvlc_clearerr() -> ();
    pub fn libvlc_printerr(fmt: *const libc::c_char, ...)
     -> *const libc::c_char;
    pub fn libvlc_new(argc: libc::c_int, argv: *const *const libc::c_char)
     -> *mut libvlc_instance_t;
    pub fn libvlc_release(p_instance: *mut libvlc_instance_t) -> ();
    pub fn libvlc_retain(p_instance: *mut libvlc_instance_t) -> ();
    pub fn libvlc_add_intf(p_instance: *mut libvlc_instance_t,
                           name: *const libc::c_char) -> libc::c_int;
    pub fn libvlc_set_exit_handler(p_instance: *mut libvlc_instance_t,
                                   cb:
                                       ::std::option::Option<extern "C" fn
                                                                 (arg1:
                                                                      *mut libc::c_void)
                                                                 -> ()>,
                                   opaque: *mut libc::c_void) -> ();
    pub fn libvlc_wait(p_instance: *mut libvlc_instance_t) -> ();
    pub fn libvlc_set_user_agent(p_instance: *mut libvlc_instance_t,
                                 name: *const libc::c_char,
                                 http: *const libc::c_char) -> ();
    pub fn libvlc_set_app_id(p_instance: *mut libvlc_instance_t,
                             id: *const libc::c_char,
                             version: *const libc::c_char,
                             icon: *const libc::c_char) -> ();
    pub fn libvlc_get_version() -> *const libc::c_char;
    pub fn libvlc_get_compiler() -> *const libc::c_char;
    pub fn libvlc_get_changeset() -> *const libc::c_char;
    pub fn libvlc_free(ptr: *mut libc::c_void) -> ();
    pub fn libvlc_event_attach(p_event_manager: *mut libvlc_event_manager_t,
                               i_event_type: libvlc_event_type_t,
                               f_callback: libvlc_callback_t,
                               user_data: *mut libc::c_void)
     -> libc::c_int;
    pub fn libvlc_event_detach(p_event_manager: *mut libvlc_event_manager_t,
                               i_event_type: libvlc_event_type_t,
                               f_callback: libvlc_callback_t,
                               p_user_data: *mut libc::c_void) -> ();
    pub fn libvlc_event_type_name(event_type: libvlc_event_type_t)
     -> *const libc::c_char;
    pub fn libvlc_log_get_context(ctx: *const libvlc_log_t,
                                  module: *mut *const libc::c_char,
                                  file: *mut *const libc::c_char,
                                  line: *mut libc::c_uint) -> ();
    pub fn libvlc_log_get_object(ctx: *const libvlc_log_t,
                                 name: *mut *const libc::c_char,
                                 header: *mut *const libc::c_char,
                                 id: *mut uintptr_t) -> ();
    pub fn libvlc_log_unset(arg1: *mut libvlc_instance_t) -> ();
    pub fn libvlc_get_log_verbosity(p_instance: *const libvlc_instance_t)
     -> libc::c_uint;
    pub fn libvlc_set_log_verbosity(p_instance: *mut libvlc_instance_t,
                                    level: libc::c_uint) -> ();
    pub fn libvlc_log_open(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_log_t;
    pub fn libvlc_log_close(p_log: *mut libvlc_log_t) -> ();
    pub fn libvlc_log_count(p_log: *const libvlc_log_t) -> libc::c_uint;
    pub fn libvlc_log_clear(p_log: *mut libvlc_log_t) -> ();
    pub fn libvlc_log_get_iterator(p_log: *const libvlc_log_t)
     -> *mut libvlc_log_iterator_t;
    pub fn libvlc_log_iterator_free(p_iter: *mut libvlc_log_iterator_t) -> ();
    pub fn libvlc_log_iterator_has_next(p_iter: *const libvlc_log_iterator_t)
     -> libc::c_int;
    pub fn libvlc_log_iterator_next(p_iter: *mut libvlc_log_iterator_t,
                                    p_buf: *mut libvlc_log_message_t)
     -> *mut libvlc_log_message_t;
    pub fn libvlc_module_description_list_release(p_list:
                                                      *mut libvlc_module_description_t)
     -> ();
    pub fn libvlc_audio_filter_list_get(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_module_description_t;
    pub fn libvlc_video_filter_list_get(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_module_description_t;
    pub fn libvlc_clock() -> int64_t;
    pub fn libvlc_media_new_location(p_instance: *mut libvlc_instance_t,
                                     psz_mrl: *const libc::c_char)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_new_path(p_instance: *mut libvlc_instance_t,
                                 path: *const libc::c_char)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_new_fd(p_instance: *mut libvlc_instance_t,
                               fd: libc::c_int) -> *mut libvlc_media_t;
    pub fn libvlc_media_new_as_node(p_instance: *mut libvlc_instance_t,
                                    psz_name: *const libc::c_char)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_add_option(p_md: *mut libvlc_media_t,
                                   psz_options: *const libc::c_char) -> ();
    pub fn libvlc_media_add_option_flag(p_md: *mut libvlc_media_t,
                                        psz_options: *const libc::c_char,
                                        i_flags: libc::c_uint) -> ();
    pub fn libvlc_media_retain(p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_release(p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_get_mrl(p_md: *mut libvlc_media_t)
     -> *mut libc::c_char;
    pub fn libvlc_media_duplicate(p_md: *mut libvlc_media_t)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_get_meta(p_md: *mut libvlc_media_t,
                                 e_meta: libvlc_meta_t)
     -> *mut libc::c_char;
    pub fn libvlc_media_set_meta(p_md: *mut libvlc_media_t,
                                 e_meta: libvlc_meta_t,
                                 psz_value: *const libc::c_char) -> ();
    pub fn libvlc_media_save_meta(p_md: *mut libvlc_media_t) -> libc::c_int;
    pub fn libvlc_media_get_state(p_md: *mut libvlc_media_t)
     -> libvlc_state_t;
    pub fn libvlc_media_get_stats(p_md: *mut libvlc_media_t,
                                  p_stats: *mut libvlc_media_stats_t)
     -> libc::c_int;
    pub fn libvlc_media_subitems(p_md: *mut libvlc_media_t)
     -> *mut Struct_libvlc_media_list_t;
    pub fn libvlc_media_event_manager(p_md: *mut libvlc_media_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_media_get_duration(p_md: *mut libvlc_media_t)
     -> libvlc_time_t;
    pub fn libvlc_media_parse(p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_parse_async(p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_is_parsed(p_md: *mut libvlc_media_t) -> libc::c_int;
    pub fn libvlc_media_set_user_data(p_md: *mut libvlc_media_t,
                                      p_new_user_data: *mut libc::c_void)
     -> ();
    pub fn libvlc_media_get_user_data(p_md: *mut libvlc_media_t)
     -> *mut libc::c_void;
    pub fn libvlc_media_get_tracks_info(p_md: *mut libvlc_media_t,
                                        tracks:
                                            *mut *mut libvlc_media_track_info_t)
     -> libc::c_int;
    pub fn libvlc_media_tracks_get(p_md: *mut libvlc_media_t,
                                   tracks:
                                       *mut *mut *mut libvlc_media_track_t)
     -> libc::c_uint;
    pub fn libvlc_media_tracks_release(p_tracks:
                                           *mut *mut libvlc_media_track_t,
                                       i_count: libc::c_uint) -> ();
    pub fn libvlc_media_player_new(p_libvlc_instance: *mut libvlc_instance_t)
     -> *mut libvlc_media_player_t;
    pub fn libvlc_media_player_new_from_media(p_md: *mut libvlc_media_t)
     -> *mut libvlc_media_player_t;
    pub fn libvlc_media_player_release(p_mi: *mut libvlc_media_player_t)
     -> ();
    pub fn libvlc_media_player_retain(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_media_player_set_media(p_mi: *mut libvlc_media_player_t,
                                         p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_player_get_media(p_mi: *mut libvlc_media_player_t)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_player_event_manager(p_mi: *mut libvlc_media_player_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_media_player_is_playing(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_play(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_set_pause(mp: *mut libvlc_media_player_t,
                                         do_pause: libc::c_int) -> ();
    pub fn libvlc_media_player_pause(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_media_player_stop(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_video_set_callbacks(mp: *mut libvlc_media_player_t,
                                      lock: libvlc_video_lock_cb,
                                      unlock: libvlc_video_unlock_cb,
                                      display: libvlc_video_display_cb,
                                      opaque: *mut libc::c_void) -> ();
    pub fn libvlc_video_set_format(mp: *mut libvlc_media_player_t,
                                   chroma: *const libc::c_char,
                                   width: libc::c_uint,
                                   height: libc::c_uint,
                                   pitch: libc::c_uint) -> ();
    pub fn libvlc_video_set_format_callbacks(mp: *mut libvlc_media_player_t,
                                             setup: libvlc_video_format_cb,
                                             cleanup: libvlc_video_cleanup_cb)
     -> ();
    pub fn libvlc_media_player_set_nsobject(p_mi: *mut libvlc_media_player_t,
                                            drawable: *mut libc::c_void)
     -> ();
    pub fn libvlc_media_player_get_nsobject(p_mi: *mut libvlc_media_player_t)
     -> *mut libc::c_void;
    pub fn libvlc_media_player_set_agl(p_mi: *mut libvlc_media_player_t,
                                       drawable: uint32_t) -> ();
    pub fn libvlc_media_player_get_agl(p_mi: *mut libvlc_media_player_t)
     -> uint32_t;
    pub fn libvlc_media_player_set_xwindow(p_mi: *mut libvlc_media_player_t,
                                           drawable: uint32_t) -> ();
    pub fn libvlc_media_player_get_xwindow(p_mi: *mut libvlc_media_player_t)
     -> uint32_t;
    pub fn libvlc_media_player_set_hwnd(p_mi: *mut libvlc_media_player_t,
                                        drawable: *mut libc::c_void) -> ();
    pub fn libvlc_media_player_get_hwnd(p_mi: *mut libvlc_media_player_t)
     -> *mut libc::c_void;
    pub fn libvlc_audio_set_callbacks(mp: *mut libvlc_media_player_t,
                                      play: libvlc_audio_play_cb,
                                      pause: libvlc_audio_pause_cb,
                                      resume: libvlc_audio_resume_cb,
                                      flush: libvlc_audio_flush_cb,
                                      drain: libvlc_audio_drain_cb,
                                      opaque: *mut libc::c_void) -> ();
    pub fn libvlc_audio_set_volume_callback(mp: *mut libvlc_media_player_t,
                                            set_volume:
                                                libvlc_audio_set_volume_cb)
     -> ();
    pub fn libvlc_audio_set_format_callbacks(mp: *mut libvlc_media_player_t,
                                             setup: libvlc_audio_setup_cb,
                                             cleanup: libvlc_audio_cleanup_cb)
     -> ();
    pub fn libvlc_audio_set_format(mp: *mut libvlc_media_player_t,
                                   format: *const libc::c_char,
                                   rate: libc::c_uint,
                                   channels: libc::c_uint) -> ();
    pub fn libvlc_media_player_get_length(p_mi: *mut libvlc_media_player_t)
     -> libvlc_time_t;
    pub fn libvlc_media_player_get_time(p_mi: *mut libvlc_media_player_t)
     -> libvlc_time_t;
    pub fn libvlc_media_player_set_time(p_mi: *mut libvlc_media_player_t,
                                        i_time: libvlc_time_t) -> ();
    pub fn libvlc_media_player_get_position(p_mi: *mut libvlc_media_player_t)
     -> libc::c_float;
    pub fn libvlc_media_player_set_position(p_mi: *mut libvlc_media_player_t,
                                            f_pos: libc::c_float) -> ();
    pub fn libvlc_media_player_set_chapter(p_mi: *mut libvlc_media_player_t,
                                           i_chapter: libc::c_int) -> ();
    pub fn libvlc_media_player_get_chapter(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_get_chapter_count(p_mi:
                                                     *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_will_play(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_get_chapter_count_for_title(p_mi:
                                                               *mut libvlc_media_player_t,
                                                           i_title:
                                                               libc::c_int)
     -> libc::c_int;
    pub fn libvlc_media_player_set_title(p_mi: *mut libvlc_media_player_t,
                                         i_title: libc::c_int) -> ();
    pub fn libvlc_media_player_get_title(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_get_title_count(p_mi:
                                                   *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_previous_chapter(p_mi:
                                                    *mut libvlc_media_player_t)
     -> ();
    pub fn libvlc_media_player_next_chapter(p_mi: *mut libvlc_media_player_t)
     -> ();
    pub fn libvlc_media_player_get_rate(p_mi: *mut libvlc_media_player_t)
     -> libc::c_float;
    pub fn libvlc_media_player_set_rate(p_mi: *mut libvlc_media_player_t,
                                        rate: libc::c_float)
     -> libc::c_int;
    pub fn libvlc_media_player_get_state(p_mi: *mut libvlc_media_player_t)
     -> libvlc_state_t;
    pub fn libvlc_media_player_get_fps(p_mi: *mut libvlc_media_player_t)
     -> libc::c_float;
    pub fn libvlc_media_player_has_vout(p_mi: *mut libvlc_media_player_t)
     -> libc::c_uint;
    pub fn libvlc_media_player_is_seekable(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_can_pause(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_media_player_next_frame(p_mi: *mut libvlc_media_player_t)
     -> ();
    pub fn libvlc_media_player_navigate(p_mi: *mut libvlc_media_player_t,
                                        navigate: libc::c_uint) -> ();
    pub fn libvlc_media_player_set_video_title_display(p_mi:
                                                           *mut libvlc_media_player_t,
                                                       position:
                                                           libvlc_position_t,
                                                       timeout:
                                                           libc::c_uint)
     -> ();
    pub fn libvlc_track_description_list_release(p_track_description:
                                                     *mut libvlc_track_description_t)
     -> ();
    pub fn libvlc_track_description_release(p_track_description:
                                                *mut libvlc_track_description_t)
     -> ();
    pub fn libvlc_toggle_fullscreen(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_set_fullscreen(p_mi: *mut libvlc_media_player_t,
                                 b_fullscreen: libc::c_int) -> ();
    pub fn libvlc_get_fullscreen(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_set_key_input(p_mi: *mut libvlc_media_player_t,
                                      on: libc::c_uint) -> ();
    pub fn libvlc_video_set_mouse_input(p_mi: *mut libvlc_media_player_t,
                                        on: libc::c_uint) -> ();
    pub fn libvlc_video_get_size(p_mi: *mut libvlc_media_player_t,
                                 num: libc::c_uint, px: *mut libc::c_uint,
                                 py: *mut libc::c_uint) -> libc::c_int;
    pub fn libvlc_video_get_height(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_get_width(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_get_cursor(p_mi: *mut libvlc_media_player_t,
                                   num: libc::c_uint,
                                   px: *mut libc::c_int,
                                   py: *mut libc::c_int) -> libc::c_int;
    pub fn libvlc_video_get_scale(p_mi: *mut libvlc_media_player_t)
     -> libc::c_float;
    pub fn libvlc_video_set_scale(p_mi: *mut libvlc_media_player_t,
                                  f_factor: libc::c_float) -> ();
    pub fn libvlc_video_get_aspect_ratio(p_mi: *mut libvlc_media_player_t)
     -> *mut libc::c_char;
    pub fn libvlc_video_set_aspect_ratio(p_mi: *mut libvlc_media_player_t,
                                         psz_aspect: *const libc::c_char)
     -> ();
    pub fn libvlc_video_get_spu(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_get_spu_count(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_get_spu_description(p_mi: *mut libvlc_media_player_t)
     -> *mut libvlc_track_description_t;
    pub fn libvlc_video_set_spu(p_mi: *mut libvlc_media_player_t,
                                i_spu: libc::c_int) -> libc::c_int;
    pub fn libvlc_video_set_subtitle_file(p_mi: *mut libvlc_media_player_t,
                                          psz_subtitle: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_video_get_spu_delay(p_mi: *mut libvlc_media_player_t)
     -> int64_t;
    pub fn libvlc_video_set_spu_delay(p_mi: *mut libvlc_media_player_t,
                                      i_delay: int64_t) -> libc::c_int;
    pub fn libvlc_video_get_title_description(p_mi:
                                                  *mut libvlc_media_player_t)
     -> *mut libvlc_track_description_t;
    pub fn libvlc_video_get_chapter_description(p_mi:
                                                    *mut libvlc_media_player_t,
                                                i_title: libc::c_int)
     -> *mut libvlc_track_description_t;
    pub fn libvlc_video_get_crop_geometry(p_mi: *mut libvlc_media_player_t)
     -> *mut libc::c_char;
    pub fn libvlc_video_set_crop_geometry(p_mi: *mut libvlc_media_player_t,
                                          psz_geometry: *const libc::c_char)
     -> ();
    pub fn libvlc_video_get_teletext(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_set_teletext(p_mi: *mut libvlc_media_player_t,
                                     i_page: libc::c_int) -> ();
    pub fn libvlc_toggle_teletext(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_video_get_track_count(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_get_track_description(p_mi:
                                                  *mut libvlc_media_player_t)
     -> *mut libvlc_track_description_t;
    pub fn libvlc_video_get_track(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_video_set_track(p_mi: *mut libvlc_media_player_t,
                                  i_track: libc::c_int) -> libc::c_int;
    pub fn libvlc_video_take_snapshot(p_mi: *mut libvlc_media_player_t,
                                      num: libc::c_uint,
                                      psz_filepath: *const libc::c_char,
                                      i_width: libc::c_uint,
                                      i_height: libc::c_uint)
     -> libc::c_int;
    pub fn libvlc_video_set_deinterlace(p_mi: *mut libvlc_media_player_t,
                                        psz_mode: *const libc::c_char)
     -> ();
    pub fn libvlc_video_get_marquee_int(p_mi: *mut libvlc_media_player_t,
                                        option: libc::c_uint)
     -> libc::c_int;
    pub fn libvlc_video_get_marquee_string(p_mi: *mut libvlc_media_player_t,
                                           option: libc::c_uint)
     -> *mut libc::c_char;
    pub fn libvlc_video_set_marquee_int(p_mi: *mut libvlc_media_player_t,
                                        option: libc::c_uint,
                                        i_val: libc::c_int) -> ();
    pub fn libvlc_video_set_marquee_string(p_mi: *mut libvlc_media_player_t,
                                           option: libc::c_uint,
                                           psz_text: *const libc::c_char)
     -> ();
    pub fn libvlc_video_get_logo_int(p_mi: *mut libvlc_media_player_t,
                                     option: libc::c_uint) -> libc::c_int;
    pub fn libvlc_video_set_logo_int(p_mi: *mut libvlc_media_player_t,
                                     option: libc::c_uint,
                                     value: libc::c_int) -> ();
    pub fn libvlc_video_set_logo_string(p_mi: *mut libvlc_media_player_t,
                                        option: libc::c_uint,
                                        psz_value: *const libc::c_char)
     -> ();
    pub fn libvlc_video_get_adjust_int(p_mi: *mut libvlc_media_player_t,
                                       option: libc::c_uint)
     -> libc::c_int;
    pub fn libvlc_video_set_adjust_int(p_mi: *mut libvlc_media_player_t,
                                       option: libc::c_uint,
                                       value: libc::c_int) -> ();
    pub fn libvlc_video_get_adjust_float(p_mi: *mut libvlc_media_player_t,
                                         option: libc::c_uint)
     -> libc::c_float;
    pub fn libvlc_video_set_adjust_float(p_mi: *mut libvlc_media_player_t,
                                         option: libc::c_uint,
                                         value: libc::c_float) -> ();
    pub fn libvlc_audio_output_list_get(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_audio_output_t;
    pub fn libvlc_audio_output_list_release(p_list:
                                                *mut libvlc_audio_output_t)
     -> ();
    pub fn libvlc_audio_output_set(p_mi: *mut libvlc_media_player_t,
                                   psz_name: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_audio_output_device_count(arg1: *mut libvlc_instance_t,
                                            arg2: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_audio_output_device_longname(arg1: *mut libvlc_instance_t,
                                               arg2: *const libc::c_char,
                                               arg3: libc::c_int)
     -> *mut libc::c_char;
    pub fn libvlc_audio_output_device_id(arg1: *mut libvlc_instance_t,
                                         arg2: *const libc::c_char,
                                         arg3: libc::c_int)
     -> *mut libc::c_char;
    pub fn libvlc_audio_output_device_list_get(p_instance:
                                                   *mut libvlc_instance_t,
                                               aout: *const libc::c_char)
     -> *mut libvlc_audio_output_device_t;
    pub fn libvlc_audio_output_device_list_release(p_list:
                                                       *mut libvlc_audio_output_device_t)
     -> ();
    pub fn libvlc_audio_output_device_set(p_mi: *mut libvlc_media_player_t,
                                          psz_audio_output:
                                              *const libc::c_char,
                                          psz_device_id:
                                              *const libc::c_char) -> ();
    pub fn libvlc_audio_output_get_device_type(p_mi:
                                                   *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_output_set_device_type(arg1:
                                                   *mut libvlc_media_player_t,
                                               arg2: libc::c_int) -> ();
    pub fn libvlc_audio_toggle_mute(p_mi: *mut libvlc_media_player_t) -> ();
    pub fn libvlc_audio_get_mute(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_set_mute(p_mi: *mut libvlc_media_player_t,
                                 status: libc::c_int) -> ();
    pub fn libvlc_audio_get_volume(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_set_volume(p_mi: *mut libvlc_media_player_t,
                                   i_volume: libc::c_int) -> libc::c_int;
    pub fn libvlc_audio_get_track_count(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_get_track_description(p_mi:
                                                  *mut libvlc_media_player_t)
     -> *mut libvlc_track_description_t;
    pub fn libvlc_audio_get_track(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_set_track(p_mi: *mut libvlc_media_player_t,
                                  i_track: libc::c_int) -> libc::c_int;
    pub fn libvlc_audio_get_channel(p_mi: *mut libvlc_media_player_t)
     -> libc::c_int;
    pub fn libvlc_audio_set_channel(p_mi: *mut libvlc_media_player_t,
                                    channel: libc::c_int) -> libc::c_int;
    pub fn libvlc_audio_get_delay(p_mi: *mut libvlc_media_player_t)
     -> int64_t;
    pub fn libvlc_audio_set_delay(p_mi: *mut libvlc_media_player_t,
                                  i_delay: int64_t) -> libc::c_int;
    pub fn libvlc_media_list_new(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_media_list_t;
    pub fn libvlc_media_list_release(p_ml: *mut libvlc_media_list_t) -> ();
    pub fn libvlc_media_list_retain(p_ml: *mut libvlc_media_list_t) -> ();
    pub fn libvlc_media_list_add_file_content(p_ml: *mut libvlc_media_list_t,
                                              psz_uri: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_media_list_set_media(p_ml: *mut libvlc_media_list_t,
                                       p_md: *mut libvlc_media_t) -> ();
    pub fn libvlc_media_list_media(p_ml: *mut libvlc_media_list_t)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_list_add_media(p_ml: *mut libvlc_media_list_t,
                                       p_md: *mut libvlc_media_t)
     -> libc::c_int;
    pub fn libvlc_media_list_insert_media(p_ml: *mut libvlc_media_list_t,
                                          p_md: *mut libvlc_media_t,
                                          i_pos: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_media_list_remove_index(p_ml: *mut libvlc_media_list_t,
                                          i_pos: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_media_list_count(p_ml: *mut libvlc_media_list_t)
     -> libc::c_int;
    pub fn libvlc_media_list_item_at_index(p_ml: *mut libvlc_media_list_t,
                                           i_pos: libc::c_int)
     -> *mut libvlc_media_t;
    pub fn libvlc_media_list_index_of_item(p_ml: *mut libvlc_media_list_t,
                                           p_md: *mut libvlc_media_t)
     -> libc::c_int;
    pub fn libvlc_media_list_is_readonly(p_ml: *mut libvlc_media_list_t)
     -> libc::c_int;
    pub fn libvlc_media_list_lock(p_ml: *mut libvlc_media_list_t) -> ();
    pub fn libvlc_media_list_unlock(p_ml: *mut libvlc_media_list_t) -> ();
    pub fn libvlc_media_list_event_manager(p_ml: *mut libvlc_media_list_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_media_list_player_new(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_media_list_player_t;
    pub fn libvlc_media_list_player_release(p_mlp:
                                                *mut libvlc_media_list_player_t)
     -> ();
    pub fn libvlc_media_list_player_retain(p_mlp:
                                               *mut libvlc_media_list_player_t)
     -> ();
    pub fn libvlc_media_list_player_event_manager(p_mlp:
                                                      *mut libvlc_media_list_player_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_media_list_player_set_media_player(p_mlp:
                                                         *mut libvlc_media_list_player_t,
                                                     p_mi:
                                                         *mut libvlc_media_player_t)
     -> ();
    pub fn libvlc_media_list_player_set_media_list(p_mlp:
                                                       *mut libvlc_media_list_player_t,
                                                   p_mlist:
                                                       *mut libvlc_media_list_t)
     -> ();
    pub fn libvlc_media_list_player_play(p_mlp:
                                             *mut libvlc_media_list_player_t)
     -> ();
    pub fn libvlc_media_list_player_pause(p_mlp:
                                              *mut libvlc_media_list_player_t)
     -> ();
    pub fn libvlc_media_list_player_is_playing(p_mlp:
                                                   *mut libvlc_media_list_player_t)
     -> libc::c_int;
    pub fn libvlc_media_list_player_get_state(p_mlp:
                                                  *mut libvlc_media_list_player_t)
     -> libvlc_state_t;
    pub fn libvlc_media_list_player_play_item_at_index(p_mlp:
                                                           *mut libvlc_media_list_player_t,
                                                       i_index: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_media_list_player_play_item(p_mlp:
                                                  *mut libvlc_media_list_player_t,
                                              p_md: *mut libvlc_media_t)
     -> libc::c_int;
    pub fn libvlc_media_list_player_stop(p_mlp:
                                             *mut libvlc_media_list_player_t)
     -> ();
    pub fn libvlc_media_list_player_next(p_mlp:
                                             *mut libvlc_media_list_player_t)
     -> libc::c_int;
    pub fn libvlc_media_list_player_previous(p_mlp:
                                                 *mut libvlc_media_list_player_t)
     -> libc::c_int;
    pub fn libvlc_media_list_player_set_playback_mode(p_mlp:
                                                          *mut libvlc_media_list_player_t,
                                                      e_mode:
                                                          libvlc_playback_mode_t)
     -> ();
    pub fn libvlc_media_library_new(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_media_library_t;
    pub fn libvlc_media_library_release(p_mlib: *mut libvlc_media_library_t)
     -> ();
    pub fn libvlc_media_library_retain(p_mlib: *mut libvlc_media_library_t)
     -> ();
    pub fn libvlc_media_library_load(p_mlib: *mut libvlc_media_library_t)
     -> libc::c_int;
    pub fn libvlc_media_library_media_list(p_mlib:
                                               *mut libvlc_media_library_t)
     -> *mut libvlc_media_list_t;
    pub fn libvlc_media_discoverer_new_from_name(p_inst:
                                                     *mut libvlc_instance_t,
                                                 psz_name:
                                                     *const libc::c_char)
     -> *mut libvlc_media_discoverer_t;
    pub fn libvlc_media_discoverer_release(p_mdis:
                                               *mut libvlc_media_discoverer_t)
     -> ();
    pub fn libvlc_media_discoverer_localized_name(p_mdis:
                                                      *mut libvlc_media_discoverer_t)
     -> *mut libc::c_char;
    pub fn libvlc_media_discoverer_media_list(p_mdis:
                                                  *mut libvlc_media_discoverer_t)
     -> *mut libvlc_media_list_t;
    pub fn libvlc_media_discoverer_event_manager(p_mdis:
                                                     *mut libvlc_media_discoverer_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_media_discoverer_is_running(p_mdis:
                                                  *mut libvlc_media_discoverer_t)
     -> libc::c_int;
    pub fn libvlc_vlm_release(p_instance: *mut libvlc_instance_t) -> ();
    pub fn libvlc_vlm_add_broadcast(p_instance: *mut libvlc_instance_t,
                                    psz_name: *const libc::c_char,
                                    psz_input: *const libc::c_char,
                                    psz_output: *const libc::c_char,
                                    i_options: libc::c_int,
                                    ppsz_options:
                                        *const *const libc::c_char,
                                    b_enabled: libc::c_int,
                                    b_loop: libc::c_int) -> libc::c_int;
    pub fn libvlc_vlm_add_vod(p_instance: *mut libvlc_instance_t,
                              psz_name: *const libc::c_char,
                              psz_input: *const libc::c_char,
                              i_options: libc::c_int,
                              ppsz_options: *const *const libc::c_char,
                              b_enabled: libc::c_int,
                              psz_mux: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_del_media(p_instance: *mut libvlc_instance_t,
                                psz_name: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_set_enabled(p_instance: *mut libvlc_instance_t,
                                  psz_name: *const libc::c_char,
                                  b_enabled: libc::c_int) -> libc::c_int;
    pub fn libvlc_vlm_set_output(p_instance: *mut libvlc_instance_t,
                                 psz_name: *const libc::c_char,
                                 psz_output: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_set_input(p_instance: *mut libvlc_instance_t,
                                psz_name: *const libc::c_char,
                                psz_input: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_add_input(p_instance: *mut libvlc_instance_t,
                                psz_name: *const libc::c_char,
                                psz_input: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_set_loop(p_instance: *mut libvlc_instance_t,
                               psz_name: *const libc::c_char,
                               b_loop: libc::c_int) -> libc::c_int;
    pub fn libvlc_vlm_set_mux(p_instance: *mut libvlc_instance_t,
                              psz_name: *const libc::c_char,
                              psz_mux: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_change_media(p_instance: *mut libvlc_instance_t,
                                   psz_name: *const libc::c_char,
                                   psz_input: *const libc::c_char,
                                   psz_output: *const libc::c_char,
                                   i_options: libc::c_int,
                                   ppsz_options: *const *const libc::c_char,
                                   b_enabled: libc::c_int,
                                   b_loop: libc::c_int) -> libc::c_int;
    pub fn libvlc_vlm_play_media(p_instance: *mut libvlc_instance_t,
                                 psz_name: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_stop_media(p_instance: *mut libvlc_instance_t,
                                 psz_name: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_pause_media(p_instance: *mut libvlc_instance_t,
                                  psz_name: *const libc::c_char)
     -> libc::c_int;
    pub fn libvlc_vlm_seek_media(p_instance: *mut libvlc_instance_t,
                                 psz_name: *const libc::c_char,
                                 f_percentage: libc::c_float)
     -> libc::c_int;
    pub fn libvlc_vlm_show_media(p_instance: *mut libvlc_instance_t,
                                 psz_name: *const libc::c_char)
     -> *const libc::c_char;
    pub fn libvlc_vlm_get_media_instance_position(p_instance:
                                                      *mut libvlc_instance_t,
                                                  psz_name:
                                                      *const libc::c_char,
                                                  i_instance: libc::c_int)
     -> libc::c_float;
    pub fn libvlc_vlm_get_media_instance_time(p_instance:
                                                  *mut libvlc_instance_t,
                                              psz_name: *const libc::c_char,
                                              i_instance: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_vlm_get_media_instance_length(p_instance:
                                                    *mut libvlc_instance_t,
                                                psz_name:
                                                    *const libc::c_char,
                                                i_instance: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_vlm_get_media_instance_rate(p_instance:
                                                  *mut libvlc_instance_t,
                                              psz_name: *const libc::c_char,
                                              i_instance: libc::c_int)
     -> libc::c_int;
    pub fn libvlc_vlm_get_event_manager(p_instance: *mut libvlc_instance_t)
     -> *mut libvlc_event_manager_t;
    pub fn libvlc_playlist_play(p_instance: *mut libvlc_instance_t,
                                i_id: libc::c_int, i_options: libc::c_int,
                                ppsz_options: *mut *mut libc::c_char) -> ();
}
